name: GameCore CI/CD Pipeline

on:
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'GameCore.sln'
  WEB_PROJECT: 'GameCore.Web'
  TEST_PROJECT: 'GameCore.Tests'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build project
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
      
    - name: Run tests
      run: |
        dotnet test ${{ env.TEST_PROJECT }}/${{ env.TEST_PROJECT }}.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/
          
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./TestResults/
        flags: unittests
        name: GameCore-Coverage
        fail_ci_if_error: false
        
    - name: Publish project
      run: |
        dotnet publish ${{ env.WEB_PROJECT }}/${{ env.WEB_PROJECT }}.csproj \
          --configuration Release \
          --no-build \
          --output ./publish
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webapp-package-${{ github.run_number }}
        path: ./publish/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: .NET security scan
      run: |
        dotnet restore ${{ env.SOLUTION_FILE }}
        dotnet list package --vulnerable --include-transitive || true
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: csharp
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  notify:
    name: Send notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: always()
    
    steps:
    - name: Send Teams notification
      if: always() && secrets.TEAMS_WEBHOOK_URL != '' && github.event_name != 'pull_request'
      run: |
        STATUS="${{ needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' && 'Success' || 'Failed' }}"
        COLOR="${{ needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' && '00FF00' || 'FF0000' }}"
        curl -H "Content-Type: application/json" \
          -d "{
            \"@type\": \"MessageCard\",
            \"@context\": \"http://schema.org/extensions\",
            \"themeColor\": \"$COLOR\",
            \"summary\": \"GameCore CI/CD Result\",
            \"sections\": [{
              \"activityTitle\": \"GameCore CI/CD Pipeline\",
              \"activitySubtitle\": \"${{ github.workflow }} - ${{ github.ref_name }}\",
              \"facts\": [
                {\"name\": \"Status\", \"value\": \"$STATUS\"},
                {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\"},
                {\"name\": \"Actor\", \"value\": \"${{ github.actor }}\"},
                {\"name\": \"SHA\", \"value\": \"${{ github.sha }}\"},
                {\"name\": \"Run Number\", \"value\": \"${{ github.run_number }}\"}
              ]
            }]
          }" \
          "${{ secrets.TEAMS_WEBHOOK_URL }}" || echo "Teams notification failed, but CI/CD continues"
          
    - name: Send Slack notification
      if: always() && secrets.SLACK_WEBHOOK_URL != '' && github.event_name != 'pull_request'
      run: |
        STATUS="${{ needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' && 'Success' || 'Failed' }}"
        curl -X POST -H 'Content-type: application/json' \
          -d "{
            \"text\": \"GameCore CI/CD Result: $STATUS\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*GameCore CI/CD Pipeline Complete*\\nBranch: ${{ github.ref_name }}\\nActor: ${{ github.actor }}\\nStatus: $STATUS\"
                }
              }
            ]
          }" \
          "${{ secrets.SLACK_WEBHOOK_URL }}" || echo "Slack notification failed, but CI/CD continues"
