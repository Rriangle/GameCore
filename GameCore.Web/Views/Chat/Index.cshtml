@model GameCore.Core.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "聊天";
    ViewData["ActivePage"] = "Chat";
}

<div class="container-fluid">
    <!-- 頁面標題 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-gray-800">
                        <i class="fas fa-comments text-primary"></i>
                        聊天
                    </h1>
                    <p class="text-muted mb-0">與其他玩家聊天交流</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-primary" onclick="createChatRoom()">
                        <i class="fas fa-plus"></i> 創建聊天室
                    </button>
                    <button class="btn btn-outline-primary" onclick="startPrivateChat()">
                        <i class="fas fa-user-plus"></i> 開始私聊
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- 左側：聊天室列表和私聊列表 -->
        <div class="col-lg-4 mb-4">
            <!-- 聊天室列表 -->
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-users"></i>
                        聊天室
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="chat-rooms-list">
                        @if (Model?.ChatRooms != null && Model.ChatRooms.Any())
                        {
                            @foreach (var room in Model.ChatRooms)
                            {
                                <div class="chat-room-item p-3 border-bottom" 
                                     onclick="selectChatRoom(@room.Id, '@room.Name', '@room.Type')"
                                     data-room-id="@room.Id">
                                    <div class="d-flex align-items-center">
                                        <div class="room-avatar me-3">
                                            @if (room.Type == "Public")
                                            {
                                                <div class="rounded-circle bg-primary d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                    <i class="fas fa-users text-white"></i>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="rounded-circle bg-success d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                    <i class="fas fa-lock text-white"></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="room-info flex-grow-1">
                                            <h6 class="mb-1">@room.Name</h6>
                                            <small class="text-muted">
                                                @room.MemberCount 位成員
                                                @if (room.LastMessageTime.HasValue)
                                                {
                                                    <span class="ms-2">• @room.LastMessageTime.Value.ToString("MM/dd HH:mm")</span>
                                                }
                                            </small>
                                        </div>
                                        @if (room.UnreadCount > 0)
                                        {
                                            <div class="unread-badge">
                                                <span class="badge bg-danger">@room.UnreadCount</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">目前沒有聊天室</h6>
                                <p class="text-muted">創建一個聊天室開始聊天吧！</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- 私聊列表 -->
            <div class="card shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user-friends"></i>
                        私聊
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="private-chats-list">
                        @if (Model?.PrivateChats != null && Model.PrivateChats.Any())
                        {
                            @foreach (var chat in Model.PrivateChats)
                            {
                                <div class="private-chat-item p-3 border-bottom" 
                                     onclick="selectPrivateChat(@chat.Id, '@chat.OtherUser?.Username', @chat.OtherUser?.Id)"
                                     data-chat-id="@chat.Id">
                                    <div class="d-flex align-items-center">
                                        <div class="user-avatar me-3">
                                            @if (!string.IsNullOrEmpty(chat.OtherUser?.Avatar))
                                            {
                                                <img src="@chat.OtherUser.Avatar" class="rounded-circle" width="40" height="40" alt="頭像">
                                            }
                                            else
                                            {
                                                <div class="rounded-circle bg-secondary d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                    <i class="fas fa-user text-white"></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="user-info flex-grow-1">
                                            <h6 class="mb-1">@chat.OtherUser?.Username</h6>
                                            <small class="text-muted">
                                                @if (chat.LastMessageTime.HasValue)
                                                {
                                                    <span>@chat.LastMessageTime.Value.ToString("MM/dd HH:mm")</span>
                                                }
                                                else
                                                {
                                                    <span>尚未開始聊天</span>
                                                }
                                            </small>
                                        </div>
                                        @if (chat.UnreadCount > 0)
                                        {
                                            <div class="unread-badge">
                                                <span class="badge bg-danger">@chat.UnreadCount</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-user-friends fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">目前沒有私聊</h6>
                                <p class="text-muted">開始與其他玩家私聊吧！</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- 右側：聊天介面 -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0" id="chatTitle">
                                <i class="fas fa-comments"></i>
                                選擇聊天室或私聊開始聊天
                            </h5>
                            <small class="text-muted" id="chatSubtitle"></small>
                        </div>
                        <div class="chat-actions" id="chatActions" style="display: none;">
                            <button class="btn btn-sm btn-outline-secondary me-2" onclick="showChatInfo()">
                                <i class="fas fa-info-circle"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="leaveChat()">
                                <i class="fas fa-sign-out-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <!-- 聊天區域 -->
                    <div class="chat-area" id="chatArea">
                        <div class="text-center py-5">
                            <i class="fas fa-comments fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">歡迎來到聊天系統</h5>
                            <p class="text-muted">選擇左側的聊天室或私聊開始聊天</p>
                        </div>
                    </div>

                    <!-- 輸入區域 -->
                    <div class="chat-input-area" id="chatInputArea" style="display: none;">
                        <div class="p-3 border-top">
                            <div class="d-flex align-items-end">
                                <div class="flex-grow-1 me-2">
                                    <textarea class="form-control" id="messageInput" rows="2" 
                                              placeholder="輸入訊息..." maxlength="1000"></textarea>
                                    <div class="form-text text-end">
                                        <span id="charCount">0</span>/1000
                                    </div>
                                </div>
                                <div class="d-flex flex-column">
                                    <button class="btn btn-primary mb-2" onclick="sendMessage()">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="insertEmoji('😊')">
                                        😊
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 創建聊天室 Modal -->
<div class="modal fade" id="createChatRoomModal" tabindex="-1" aria-labelledby="createChatRoomModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createChatRoomModalLabel">
                    <i class="fas fa-plus"></i> 創建聊天室
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createChatRoomForm">
                    <div class="mb-3">
                        <label for="roomName" class="form-label">聊天室名稱 <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="roomName" name="Name" required maxlength="50">
                    </div>
                    <div class="mb-3">
                        <label for="roomDescription" class="form-label">描述</label>
                        <textarea class="form-control" id="roomDescription" name="Description" rows="3" maxlength="200"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="roomType" class="form-label">類型</label>
                        <select class="form-select" id="roomType" name="Type">
                            <option value="Public">公開</option>
                            <option value="Private">私密</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="roomMembers" class="form-label">邀請成員</label>
                        <input type="text" class="form-control" id="roomMembers" name="MemberIds" 
                               placeholder="輸入用戶名，用逗號分隔">
                        <div class="form-text">留空則只邀請自己</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" onclick="submitCreateChatRoom()">創建</button>
            </div>
        </div>
    </div>
</div>

<!-- 開始私聊 Modal -->
<div class="modal fade" id="startPrivateChatModal" tabindex="-1" aria-labelledby="startPrivateChatModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="startPrivateChatModalLabel">
                    <i class="fas fa-user-plus"></i> 開始私聊
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="startPrivateChatForm">
                    <div class="mb-3">
                        <label for="targetUsername" class="form-label">目標用戶名 <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="targetUsername" name="Username" required>
                        <div class="form-text">輸入要開始私聊的用戶名</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" onclick="submitStartPrivateChat()">開始聊天</button>
            </div>
        </div>
    </div>
</div>

<!-- 聊天室資訊 Modal -->
<div class="modal fade" id="chatInfoModal" tabindex="-1" aria-labelledby="chatInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="chatInfoModalLabel">
                    <i class="fas fa-info-circle"></i> 聊天室資訊
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="chatInfoContent">
                <!-- 動態內容 -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .chat-room-item, .private-chat-item {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .chat-room-item:hover, .private-chat-item:hover {
            background-color: #f8f9fc;
        }

        .chat-room-item.active, .private-chat-item.active {
            background-color: #e3f2fd;
            border-left: 4px solid #2196f3;
        }

        .chat-area {
            height: 400px;
            overflow-y: auto;
            padding: 1rem;
        }

        .chat-input-area {
            border-top: 1px solid #e3e6f0;
        }

        .message-item {
            margin-bottom: 1rem;
        }

        .message-content {
            max-width: 70%;
            padding: 0.75rem;
            border-radius: 1rem;
            word-wrap: break-word;
        }

        .message-own {
            background-color: #007bff;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 0.25rem;
        }

        .message-other {
            background-color: #f8f9fc;
            color: #495057;
            margin-right: auto;
            border-bottom-left-radius: 0.25rem;
        }

        .message-time {
            font-size: 0.75rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }

        .unread-badge {
            position: relative;
        }

        .unread-badge .badge {
            position: absolute;
            top: -5px;
            right: -5px;
            font-size: 0.7rem;
        }

        .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
        }

        .btn-sm {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }

        /* 響應式設計 */
        @media (max-width: 991.98px) {
            .chat-area {
                height: 300px;
            }
        }
    </style>
}

@section Scripts {
    <script>
        let currentChatId = null;
        let currentChatType = null; // 'room' 或 'private'
        let messagePolling = null;

        // 頁面載入完成後初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 訊息輸入框字元計數
            document.getElementById('messageInput').addEventListener('input', function() {
                const charCount = this.value.length;
                document.getElementById('charCount').textContent = charCount;
            });

            // 訊息輸入框 Enter 鍵發送
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        });

        // 選擇聊天室
        function selectChatRoom(roomId, roomName, roomType) {
            // 移除其他項目的 active 狀態
            document.querySelectorAll('.chat-room-item, .private-chat-item').forEach(item => {
                item.classList.remove('active');
            });

            // 添加當前項目的 active 狀態
            event.currentTarget.classList.add('active');

            currentChatId = roomId;
            currentChatType = 'room';

            // 更新標題
            document.getElementById('chatTitle').innerHTML = `<i class="fas fa-users"></i> ${roomName}`;
            document.getElementById('chatSubtitle').textContent = `${roomType} 聊天室`;
            document.getElementById('chatActions').style.display = 'block';
            document.getElementById('chatInputArea').style.display = 'block';

            // 載入聊天記錄
            loadChatHistory(roomId, 'room');

            // 開始輪詢新訊息
            startMessagePolling(roomId, 'room');
        }

        // 選擇私聊
        function selectPrivateChat(chatId, username, userId) {
            // 移除其他項目的 active 狀態
            document.querySelectorAll('.chat-room-item, .private-chat-item').forEach(item => {
                item.classList.remove('active');
            });

            // 添加當前項目的 active 狀態
            event.currentTarget.classList.add('active');

            currentChatId = chatId;
            currentChatType = 'private';

            // 更新標題
            document.getElementById('chatTitle').innerHTML = `<i class="fas fa-user-friends"></i> ${username}`;
            document.getElementById('chatSubtitle').textContent = '私聊';
            document.getElementById('chatActions').style.display = 'block';
            document.getElementById('chatInputArea').style.display = 'block';

            // 載入聊天記錄
            loadChatHistory(chatId, 'private');

            // 開始輪詢新訊息
            startMessagePolling(chatId, 'private');
        }

        // 載入聊天記錄
        function loadChatHistory(chatId, type) {
            const endpoint = type === 'room' ? `/api/chat/room/${chatId}/messages` : `/api/chat/private/${chatId}/messages`;
            
            fetch(endpoint)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    displayMessages(data.data);
                } else {
                    showToast(`載入聊天記錄失敗：${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('載入聊天記錄時發生錯誤', 'error');
            });
        }

        // 顯示訊息
        function displayMessages(messages) {
            const chatArea = document.getElementById('chatArea');
            let html = '';

            if (messages && messages.length > 0) {
                messages.forEach(message => {
                    const isOwn = message.senderId === @(User.Identity?.IsAuthenticated == true ? "true" : "false");
                    const messageClass = isOwn ? 'message-own' : 'message-other';
                    const timeStr = new Date(message.createTime).toLocaleString('zh-TW', {
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit'
                    });

                    html += `
                        <div class="message-item d-flex flex-column ${isOwn ? 'align-items-end' : 'align-items-start'}">
                            <div class="message-content ${messageClass}">
                                ${message.content.replace(/\n/g, '<br>')}
                            </div>
                            <div class="message-time">
                                ${message.senderName} • ${timeStr}
                            </div>
                        </div>
                    `;
                });
            } else {
                html = `
                    <div class="text-center py-4">
                        <i class="fas fa-comments fa-3x text-muted mb-3"></i>
                        <h6 class="text-muted">開始聊天</h6>
                        <p class="text-muted">發送第一條訊息開始對話</p>
                    </div>
                `;
            }

            chatArea.innerHTML = html;
            chatArea.scrollTop = chatArea.scrollHeight;
        }

        // 發送訊息
        function sendMessage() {
            if (!currentChatId) {
                showToast('請先選擇聊天室或私聊', 'warning');
                return;
            }

            const content = document.getElementById('messageInput').value.trim();
            if (!content) {
                showToast('請輸入訊息內容', 'warning');
                return;
            }

            const endpoint = currentChatType === 'room' ? `/api/chat/room/${currentChatId}/message` : `/api/chat/private/${currentChatId}/message`;
            
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    content: content
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // 清空輸入框
                    document.getElementById('messageInput').value = '';
                    document.getElementById('charCount').textContent = '0';
                    
                    // 重新載入聊天記錄
                    loadChatHistory(currentChatId, currentChatType);
                } else {
                    showToast(`發送失敗：${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('發送訊息時發生錯誤', 'error');
            });
        }

        // 開始訊息輪詢
        function startMessagePolling(chatId, type) {
            // 停止之前的輪詢
            if (messagePolling) {
                clearInterval(messagePolling);
            }

            // 開始新的輪詢
            messagePolling = setInterval(() => {
                if (currentChatId === chatId) {
                    loadChatHistory(chatId, type);
                }
            }, 5000); // 每5秒檢查一次
        }

        // 創建聊天室
        function createChatRoom() {
            const modal = new bootstrap.Modal(document.getElementById('createChatRoomModal'));
            modal.show();
        }

        // 提交創建聊天室
        function submitCreateChatRoom() {
            const name = document.getElementById('roomName').value.trim();
            const description = document.getElementById('roomDescription').value.trim();
            const type = document.getElementById('roomType').value;
            const memberIds = document.getElementById('roomMembers').value.trim();

            if (!name) {
                showToast('請輸入聊天室名稱', 'warning');
                return;
            }

            const data = {
                name: name,
                description: description,
                type: type
            };

            if (memberIds) {
                data.memberIds = memberIds.split(',').map(id => id.trim()).filter(id => id);
            }

            fetch('/api/chat/room/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('聊天室創建成功', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createChatRoomModal')).hide();
                    // 重新整理頁面
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(`創建失敗：${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('創建聊天室時發生錯誤', 'error');
            });
        }

        // 開始私聊
        function startPrivateChat() {
            const modal = new bootstrap.Modal(document.getElementById('startPrivateChatModal'));
            modal.show();
        }

        // 提交開始私聊
        function submitStartPrivateChat() {
            const username = document.getElementById('targetUsername').value.trim();

            if (!username) {
                showToast('請輸入目標用戶名', 'warning');
                return;
            }

            fetch('/api/chat/private/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    targetUsername: username
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('私聊開始成功', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('startPrivateChatModal')).hide();
                    // 重新整理頁面
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(`開始失敗：${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('開始私聊時發生錯誤', 'error');
            });
        }

        // 顯示聊天資訊
        function showChatInfo() {
            if (!currentChatId) return;

            const endpoint = currentChatType === 'room' ? `/api/chat/room/${currentChatId}` : `/api/chat/private/${currentChatId}`;
            
            fetch(endpoint)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const chatInfo = data.data;
                    let html = '';

                    if (currentChatType === 'room') {
                        html = `
                            <h6>${chatInfo.name}</h6>
                            <p class="text-muted">${chatInfo.description || '無描述'}</p>
                            <div class="mb-3">
                                <strong>類型：</strong> ${chatInfo.type === 'Public' ? '公開' : '私密'}
                            </div>
                            <div class="mb-3">
                                <strong>成員數量：</strong> ${chatInfo.memberCount}
                            </div>
                            <div class="mb-3">
                                <strong>創建時間：</strong> ${new Date(chatInfo.createTime).toLocaleString('zh-TW')}
                            </div>
                        `;
                    } else {
                        html = `
                            <h6>私聊</h6>
                            <div class="mb-3">
                                <strong>對方用戶：</strong> ${chatInfo.otherUser?.username}
                            </div>
                            <div class="mb-3">
                                <strong>開始時間：</strong> ${new Date(chatInfo.createTime).toLocaleString('zh-TW')}
                            </div>
                        `;
                    }

                    document.getElementById('chatInfoContent').innerHTML = html;
                    const modal = new bootstrap.Modal(document.getElementById('chatInfoModal'));
                    modal.show();
                } else {
                    showToast(`載入聊天資訊失敗：${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('載入聊天資訊時發生錯誤', 'error');
            });
        }

        // 離開聊天
        function leaveChat() {
            if (!currentChatId) return;

            if (confirm('確定要離開這個聊天嗎？')) {
                const endpoint = currentChatType === 'room' ? `/api/chat/room/${currentChatId}/leave` : `/api/chat/private/${currentChatId}/leave`;
                
                fetch(endpoint, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('已離開聊天', 'success');
                        // 重新整理頁面
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showToast(`離開失敗：${data.message}`, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('離開聊天時發生錯誤', 'error');
                });
            }
        }

        // 插入表情
        function insertEmoji(emoji) {
            const textarea = document.getElementById('messageInput');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            textarea.value = text.substring(0, start) + emoji + text.substring(end);
            textarea.focus();
            textarea.setSelectionRange(start + emoji.length, start + emoji.length);
            
            // 更新字元計數
            document.getElementById('charCount').textContent = textarea.value.length;
        }

        // 顯示提示訊息
        function showToast(message, type = 'info') {
            if (type === 'success') {
                alert('✅ ' + message);
            } else if (type === 'error') {
                alert('❌ ' + message);
            } else if (type === 'warning') {
                alert('⚠️ ' + message);
            } else {
                alert(message);
            }
        }

        // 頁面離開前停止輪詢
        window.addEventListener('beforeunload', function() {
            if (messagePolling) {
                clearInterval(messagePolling);
            }
        });
    </script>
}