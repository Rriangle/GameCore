@{
    ViewData["Title"] = "小冒險遊戲";
    Layout = "_Layout";
}

<div class="minigame-container">
    <div class="game-header">
        <h1 class="game-title">🎮 小冒險遊戲</h1>
        <p class="game-description">帶著你的寵物一起冒險，獲得點數和經驗值！</p>
    </div>

    <div class="game-content">
        <!-- 寵物選擇區域 -->
        <div class="pet-selection">
            <h3>選擇寵物</h3>
            <div class="pet-list" id="petList">
                <!-- 寵物列表將由 JavaScript 動態載入 -->
            </div>
        </div>

        <!-- 遊戲區域 -->
        <div class="game-area" id="gameArea" style="display: none;">
            <div class="selected-pet">
                <h3>當前寵物</h3>
                <div class="pet-info" id="selectedPetInfo">
                    <!-- 選中寵物資訊 -->
                </div>
            </div>

            <div class="game-levels">
                <h3>選擇遊戲等級</h3>
                <div class="level-buttons">
                    <button class="level-btn" data-level="1" data-difficulty="簡單">
                        <span class="level-number">1</span>
                        <span class="level-name">簡單冒險</span>
                        <span class="level-desc">適合新手，風險較低</span>
                    </button>
                    <button class="level-btn" data-level="2" data-difficulty="中等">
                        <span class="level-number">2</span>
                        <span class="level-name">中等冒險</span>
                        <span class="level-desc">平衡的挑戰與獎勵</span>
                    </button>
                    <button class="level-btn" data-level="3" data-difficulty="困難">
                        <span class="level-number">3</span>
                        <span class="level-name">困難冒險</span>
                        <span class="level-desc">高風險高報酬</span>
                    </button>
                </div>
            </div>

            <div class="game-status">
                <div class="status-item">
                    <span class="status-label">今日遊戲次數:</span>
                    <span class="status-value" id="todayGameCount">0/3</span>
                </div>
                <div class="status-item">
                    <span class="status-label">剩餘次數:</span>
                    <span class="status-value" id="remainingGames">3</span>
                </div>
            </div>

            <div class="game-action">
                <button class="start-game-btn" id="startGameBtn" disabled>
                    開始冒險
                </button>
            </div>
        </div>

        <!-- 遊戲結果區域 -->
        <div class="game-result" id="gameResult" style="display: none;">
            <h3>冒險結果</h3>
            <div class="result-content" id="resultContent">
                <!-- 遊戲結果將由 JavaScript 動態載入 -->
            </div>
            <button class="play-again-btn" id="playAgainBtn">再玩一次</button>
        </div>

        <!-- 遊戲記錄區域 -->
        <div class="game-records">
            <h3>遊戲記錄</h3>
            <div class="records-list" id="recordsList">
                <!-- 遊戲記錄將由 JavaScript 動態載入 -->
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .minigame-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .game-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .game-title {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .game-description {
            font-size: 1.1rem;
            color: var(--text-secondary);
        }

        .game-content {
            display: grid;
            gap: 30px;
        }

        .pet-selection {
            background: var(--glass-bg);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
        }

        .pet-selection h3 {
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .pet-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .pet-card {
            background: var(--glass-bg-secondary);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .pet-card:hover {
            transform: translateY(-5px);
            border-color: var(--primary-color);
        }

        .pet-card.selected {
            border-color: var(--primary-color);
            background: var(--primary-bg);
        }

        .pet-avatar {
            width: 80px;
            height: 80px;
            margin: 0 auto 15px;
            border-radius: 50%;
            background: var(--accent-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
        }

        .pet-name {
            font-weight: bold;
            color: var(--text-primary);
            margin-bottom: 5px;
        }

        .pet-level {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .game-area {
            background: var(--glass-bg);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
        }

        .selected-pet {
            margin-bottom: 25px;
        }

        .selected-pet h3 {
            color: var(--primary-color);
            margin-bottom: 15px;
        }

        .pet-info {
            display: flex;
            align-items: center;
            gap: 20px;
            background: var(--glass-bg-secondary);
            padding: 20px;
            border-radius: 12px;
        }

        .game-levels h3 {
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .level-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .level-btn {
            background: var(--glass-bg-secondary);
            border: 2px solid transparent;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .level-btn:hover {
            transform: translateY(-3px);
            border-color: var(--accent-color);
        }

        .level-btn.selected {
            border-color: var(--primary-color);
            background: var(--primary-bg);
        }

        .level-number {
            display: block;
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .level-name {
            display: block;
            font-weight: bold;
            color: var(--text-primary);
            margin-bottom: 5px;
        }

        .level-desc {
            display: block;
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .game-status {
            display: flex;
            gap: 30px;
            margin: 25px 0;
            justify-content: center;
        }

        .status-item {
            text-align: center;
        }

        .status-label {
            display: block;
            color: var(--text-secondary);
            margin-bottom: 5px;
        }

        .status-value {
            display: block;
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .game-action {
            text-align: center;
        }

        .start-game-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 25px;
            padding: 15px 40px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .start-game-btn:hover:not(:disabled) {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .start-game-btn:disabled {
            background: var(--text-secondary);
            cursor: not-allowed;
        }

        .game-result {
            background: var(--glass-bg);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            text-align: center;
        }

        .game-result h3 {
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .result-content {
            margin-bottom: 25px;
        }

        .play-again-btn {
            background: var(--accent-color);
            color: white;
            border: none;
            border-radius: 25px;
            padding: 15px 40px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .play-again-btn:hover {
            background: var(--accent-dark);
            transform: translateY(-2px);
        }

        .game-records {
            background: var(--glass-bg);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
        }

        .game-records h3 {
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .records-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .record-item {
            background: var(--glass-bg-secondary);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .record-info {
            flex: 1;
        }

        .record-date {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .record-result {
            font-weight: bold;
            margin: 5px 0;
        }

        .record-success {
            color: var(--success-color);
        }

        .record-failure {
            color: var(--error-color);
        }

        .record-rewards {
            text-align: right;
        }

        .reward-item {
            margin: 2px 0;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .minigame-container {
                padding: 15px;
            }

            .game-title {
                font-size: 2rem;
            }

            .level-buttons {
                grid-template-columns: 1fr;
            }

            .game-status {
                flex-direction: column;
                gap: 15px;
            }

            .pet-info {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
}

@section Scripts {
    <script>
        class MiniGameManager {
            constructor() {
                this.selectedPet = null;
                this.selectedLevel = null;
                this.todayGameCount = 0;
                this.maxGamesPerDay = 3;
                this.init();
            }

            async init() {
                await this.loadPets();
                await this.loadGameStatus();
                await this.loadGameRecords();
                this.bindEvents();
            }

            async loadPets() {
                try {
                    const response = await fetch('/api/Pet/GetUserPets');
                    if (response.ok) {
                        const pets = await response.json();
                        this.renderPetList(pets);
                    }
                } catch (error) {
                    console.error('載入寵物失敗:', error);
                }
            }

            renderPetList(pets) {
                const petList = document.getElementById('petList');
                petList.innerHTML = pets.map(pet => `
                    <div class="pet-card" data-pet-id="${pet.petId}">
                        <div class="pet-avatar">🐾</div>
                        <div class="pet-name">${pet.name}</div>
                        <div class="pet-level">等級 ${pet.level}</div>
                    </div>
                `).join('');

                // 綁定寵物選擇事件
                petList.querySelectorAll('.pet-card').forEach(card => {
                    card.addEventListener('click', () => this.selectPet(card, pets.find(p => p.petId == card.dataset.petId)));
                });
            }

            selectPet(card, pet) {
                // 移除其他選中狀態
                document.querySelectorAll('.pet-card').forEach(c => c.classList.remove('selected'));
                card.classList.add('selected');

                this.selectedPet = pet;
                this.renderSelectedPet();
                this.showGameArea();
                this.checkGameEligibility();
            }

            renderSelectedPet() {
                const petInfo = document.getElementById('selectedPetInfo');
                petInfo.innerHTML = `
                    <div class="pet-avatar">🐾</div>
                    <div>
                        <div class="pet-name">${this.selectedPet.name}</div>
                        <div class="pet-level">等級 ${this.selectedPet.level}</div>
                        <div>健康度: ${this.selectedPet.health}%</div>
                        <div>飢餓度: ${this.selectedPet.hunger}%</div>
                        <div>清潔度: ${this.selectedPet.cleanliness}%</div>
                        <div>心情: ${this.selectedPet.happiness}%</div>
                        <div>體力: ${this.selectedPet.energy}%</div>
                    </div>
                `;
            }

            showGameArea() {
                document.getElementById('gameArea').style.display = 'block';
            }

            async loadGameStatus() {
                try {
                    const today = new Date().toISOString().split('T')[0];
                    const response = await fetch(`/api/MiniGame/GetUserGameRecords?page=1&pageSize=100`);
                    if (response.ok) {
                        const records = await response.json();
                        this.todayGameCount = records.filter(r => 
                            r.gameDate.startsWith(today)
                        ).length;
                        this.updateGameStatus();
                    }
                } catch (error) {
                    console.error('載入遊戲狀態失敗:', error);
                }
            }

            updateGameStatus() {
                document.getElementById('todayGameCount').textContent = `${this.todayGameCount}/${this.maxGamesPerDay}`;
                document.getElementById('remainingGames').textContent = Math.max(0, this.maxGamesPerDay - this.todayGameCount);
            }

            bindEvents() {
                // 綁定等級選擇事件
                document.querySelectorAll('.level-btn').forEach(btn => {
                    btn.addEventListener('click', () => this.selectLevel(btn));
                });

                // 綁定開始遊戲事件
                document.getElementById('startGameBtn').addEventListener('click', () => this.startGame());

                // 綁定再玩一次事件
                document.getElementById('playAgainBtn').addEventListener('click', () => this.resetGame());
            }

            selectLevel(btn) {
                document.querySelectorAll('.level-btn').forEach(b => b.classList.remove('selected'));
                btn.classList.add('selected');
                this.selectedLevel = parseInt(btn.dataset.level);
                this.updateStartButton();
            }

            updateStartButton() {
                const startBtn = document.getElementById('startGameBtn');
                startBtn.disabled = !this.selectedPet || !this.selectedLevel || this.todayGameCount >= this.maxGamesPerDay;
            }

            async checkGameEligibility() {
                if (!this.selectedPet) return;

                try {
                    const response = await fetch(`/api/MiniGame/check-eligibility/${this.selectedPet.petId}`);
                    if (response.ok) {
                        const eligibility = await response.json();
                        if (!eligibility.data.canPlay) {
                            alert(eligibility.data.message);
                        }
                    }
                } catch (error) {
                    console.error('檢查遊戲資格失敗:', error);
                }
            }

            async startGame() {
                if (!this.selectedPet || !this.selectedLevel) {
                    alert('請選擇寵物和遊戲等級');
                    return;
                }

                try {
                    const response = await fetch('/api/MiniGame/start', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            petId: this.selectedPet.petId,
                            gameLevel: this.selectedLevel
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        this.showGameResult(result.data);
                        this.todayGameCount++;
                        this.updateGameStatus();
                        this.updateStartButton();
                        await this.loadGameRecords();
                    } else {
                        const error = await response.json();
                        alert(error.message || '遊戲執行失敗');
                    }
                } catch (error) {
                    console.error('開始遊戲失敗:', error);
                    alert('遊戲執行失敗，請稍後再試');
                }
            }

            showGameResult(result) {
                const gameResult = document.getElementById('gameResult');
                const resultContent = document.getElementById('resultContent');

                resultContent.innerHTML = `
                    <div class="record-result ${result.isSuccess ? 'record-success' : 'record-failure'}">
                        ${result.isSuccess ? '🎉 冒險成功！' : '😔 冒險失敗'}
                    </div>
                    <div class="record-rewards">
                        <div class="reward-item">獲得點數: +${result.pointsEarned}</div>
                        <div class="reward-item">獲得經驗: +${result.experienceEarned}</div>
                    </div>
                    <div style="margin-top: 15px;">
                        <strong>屬性變化:</strong><br>
                        健康度: ${result.attributeChanges.healthChange > 0 ? '+' : ''}${result.attributeChanges.healthChange}%<br>
                        飢餓度: ${result.attributeChanges.hungerChange > 0 ? '+' : ''}${result.attributeChanges.hungerChange}%<br>
                        清潔度: ${result.attributeChanges.cleanlinessChange > 0 ? '+' : ''}${result.attributeChanges.cleanlinessChange}%<br>
                        心情: ${result.attributeChanges.happinessChange > 0 ? '+' : ''}${result.attributeChanges.happinessChange}%<br>
                        體力: ${result.attributeChanges.energyChange > 0 ? '+' : ''}${result.attributeChanges.energyChange}%
                    </div>
                    <div style="margin-top: 15px; color: var(--text-secondary);">
                        ${result.message}
                    </div>
                `;

                gameResult.style.display = 'block';
                document.getElementById('gameArea').style.display = 'none';
            }

            resetGame() {
                document.getElementById('gameResult').style.display = 'none';
                document.getElementById('gameArea').style.display = 'block';
                this.selectedLevel = null;
                document.querySelectorAll('.level-btn').forEach(b => b.classList.remove('selected'));
                this.updateStartButton();
            }

            async loadGameRecords() {
                try {
                    const response = await fetch('/api/MiniGame/records?page=1&pageSize=10');
                    if (response.ok) {
                        const records = await response.json();
                        this.renderGameRecords(records.data);
                    }
                } catch (error) {
                    console.error('載入遊戲記錄失敗:', error);
                }
            }

            renderGameRecords(records) {
                const recordsList = document.getElementById('recordsList');
                if (records.length === 0) {
                    recordsList.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">尚無遊戲記錄</p>';
                    return;
                }

                recordsList.innerHTML = records.map(record => `
                    <div class="record-item">
                        <div class="record-info">
                            <div class="record-date">${new Date(record.gameDate).toLocaleString()}</div>
                            <div class="record-result ${record.isSuccess ? 'record-success' : 'record-failure'}">
                                ${record.isSuccess ? '成功' : '失敗'} - 等級 ${record.gameLevel}
                            </div>
                        </div>
                        <div class="record-rewards">
                            <div class="reward-item">+${record.pointsEarned} 點</div>
                            <div class="reward-item">+${record.experienceEarned} 經驗</div>
                        </div>
                    </div>
                `).join('');
            }
        }

        // 初始化遊戲管理器
        document.addEventListener('DOMContentLoaded', () => {
            new MiniGameManager();
        });
    </script>
}