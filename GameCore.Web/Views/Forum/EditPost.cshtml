@model GameCore.Core.ViewModels.EditPostViewModel
@{
    ViewData["Title"] = "Á∑®ËºØË≤ºÊñá";
    ViewData["ActivePage"] = "Forum";
}

<div class="container-fluid">
    <!-- È†ÅÈù¢Ê®ôÈ°åÂíåÂ∞éËà™ -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/Forum" class="text-decoration-none">
                            <i class="fas fa-comments"></i> Ë´ñÂ£á
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Forum/Posts/@Model?.Post?.ForumId" class="text-decoration-none">
                            @Model?.Forum?.Name ?? "ÁâàÈù¢"
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Forum/Post/@Model?.Post?.Id" class="text-decoration-none">
                            @Model?.Post?.Title ?? "Ë≤ºÊñá"
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        Á∑®ËºØ
                    </li>
                </ol>
            </nav>
            
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-gray-800">
                        <i class="fas fa-edit text-primary"></i>
                        Á∑®ËºØË≤ºÊñá
                    </h1>
                    <p class="text-muted mb-0">Á∑®ËºØË≤ºÊñáÂÖßÂÆπÂíåË®≠ÂÆö</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/Forum/Post/@Model?.Post?.Id" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> ËøîÂõûË≤ºÊñá
                    </a>
                    <button type="button" class="btn btn-outline-info" onclick="previewPost()">
                        <i class="fas fa-eye"></i> È†êË¶Ω
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (Model?.Post != null)
    {
        <form id="editPostForm" method="post">
            <div class="row">
                <!-- Â∑¶ÂÅ¥ÔºöÁ∑®ËºØË°®ÂñÆ -->
                <div class="col-lg-8 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-edit"></i>
                                Á∑®ËºØË≤ºÊñá
                            </h5>
                        </div>
                        <div class="card-body">
                            <!-- Ê®ôÈ°å -->
                            <div class="mb-3">
                                <label for="title" class="form-label">Ê®ôÈ°å <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="title" name="Title" 
                                       value="@Model.Post.Title" required maxlength="200">
                                <div class="form-text">Ê®ôÈ°åÈï∑Â∫¶‰∏çËÉΩË∂ÖÈÅé 200 Â≠óÂÖÉ</div>
                            </div>

                            <!-- ÂÖßÂÆπ -->
                            <div class="mb-3">
                                <label for="content" class="form-label">ÂÖßÂÆπ <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="content" name="Content" rows="12" 
                                          placeholder="Ëº∏ÂÖ•Ë≤ºÊñáÂÖßÂÆπ..." required>@Model.Post.Content</textarea>
                                <div class="form-text">ÊîØÊè¥ Markdown Ë™ûÊ≥ï</div>
                            </div>

                            <!-- Ê®ôÁ±§ -->
                            <div class="mb-3">
                                <label for="tags" class="form-label">Ê®ôÁ±§</label>
                                <input type="text" class="form-control" id="tags" name="Tags" 
                                       value="@(Model.Post.Tags != null ? string.Join(", ", Model.Post.Tags) : "")" 
                                       placeholder="Áî®ÈÄóËôüÂàÜÈöîÂ§öÂÄãÊ®ôÁ±§">
                                <div class="form-text">‰æãÂ¶ÇÔºöÊîªÁï•, ÂøÉÂæó, ÂïèÈ°å</div>
                            </div>

                            <!-- Ë≤ºÊñáÈ°ûÂûã -->
                            <div class="mb-3">
                                <label for="type" class="form-label">Ë≤ºÊñáÈ°ûÂûã</label>
                                <select class="form-select" id="type" name="Type">
                                    <option value="discussion" @(Model.Post.Type == "discussion" ? "selected" : "")>Ë®éË´ñ</option>
                                    <option value="question" @(Model.Post.Type == "question" ? "selected" : "")>ÂïèÈ°å</option>
                                    <option value="guide" @(Model.Post.Type == "guide" ? "selected" : "")>ÊîªÁï•</option>
                                    <option value="share" @(Model.Post.Type == "share" ? "selected" : "")>ÂàÜ‰∫´</option>
                                    <option value="announcement" @(Model.Post.Type == "announcement" ? "selected" : "")>ÂÖ¨Âëä</option>
                                </select>
                            </div>

                            <!-- Á∑®ËºØÂéüÂõ† -->
                            <div class="mb-3">
                                <label for="editReason" class="form-label">Á∑®ËºØÂéüÂõ†</label>
                                <input type="text" class="form-control" id="editReason" name="EditReason" 
                                       placeholder="Ë´ãË™™ÊòéÊ≠§Ê¨°Á∑®ËºØÁöÑÂéüÂõ†ÔºàÈÅ∏Â°´Ôºâ">
                                <div class="form-text">Á∑®ËºØÂéüÂõ†ÊúÉÈ°ØÁ§∫Âú®Ë≤ºÊñáÊ≠∑Âè≤‰∏≠</div>
                            </div>

                            <!-- Á∑®ËºØÂ∑•ÂÖ∑ -->
                            <div class="mb-3">
                                <div class="d-flex flex-wrap gap-2">
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('**Á≤óÈ´î**')">
                                        <strong>B</strong>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('*ÊñúÈ´î*')">
                                        <em>I</em>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('[ÈÄ£Áµê](URL)')">
                                        üîó
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('![ÂúñÁâá](URL)')">
                                        üñºÔ∏è
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('`Á®ãÂºèÁ¢º`')">
                                        <code>Code</code>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('```\nÁ®ãÂºèÁ¢ºÂçÄÂ°ä\n```')">
                                        üìù
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('- ÂàóË°®È†ÖÁõÆ')">
                                        üìã
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertMarkdown('> ÂºïÁî®ÊñáÂ≠ó')">
                                        üí¨
                                    </button>
                                </div>
                            </div>

                            <!-- Êèê‰∫§ÊåâÈàï -->
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="notifyFollowers" name="NotifyFollowers" checked>
                                    <label class="form-check-label" for="notifyFollowers">
                                        ÈÄöÁü•ÈóúÊ≥®ËÄÖ
                                    </label>
                                </div>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                                        <i class="fas fa-undo"></i> ÈáçÁΩÆ
                                    </button>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i> ÂÑ≤Â≠òËÆäÊõ¥
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Âè≥ÂÅ¥ÔºöÈ†êË¶ΩÂíåË≥áË®ä -->
                <div class="col-lg-4 mb-4">
                    <!-- È†êË¶ΩÂçÄÂüü -->
                    <div class="card shadow-sm mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-eye"></i>
                                È†êË¶Ω
                            </h5>
                        </div>
                        <div class="card-body">
                            <div id="previewContent" class="preview-content">
                                <p class="text-muted text-center">ÈªûÊìäÈ†êË¶ΩÊåâÈàïÊü•ÁúãÊïàÊûú</p>
                            </div>
                        </div>
                    </div>

                    <!-- Ë≤ºÊñáË≥áË®ä -->
                    <div class="card shadow-sm mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle"></i>
                                Ë≤ºÊñáË≥áË®ä
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="post-info">
                                <div class="mb-2">
                                    <strong>‰ΩúËÄÖÔºö</strong>
                                    <span>@Model.Post.Author?.Username</span>
                                </div>
                                <div class="mb-2">
                                    <strong>Âª∫Á´ãÊôÇÈñìÔºö</strong>
                                    <span>@Model.Post.CreateTime.ToString("yyyy/MM/dd HH:mm")</span>
                                </div>
                                @if (Model.Post.UpdateTime.HasValue)
                                {
                                    <div class="mb-2">
                                        <strong>ÊúÄÂæåÁ∑®ËºØÔºö</strong>
                                        <span>@Model.Post.UpdateTime.Value.ToString("yyyy/MM/dd HH:mm")</span>
                                    </div>
                                }
                                <div class="mb-2">
                                    <strong>ÁÄèË¶ΩÊ¨°Êï∏Ôºö</strong>
                                    <span>@(Model.Post.ViewCount ?? 0)</span>
                                </div>
                                <div class="mb-2">
                                    <strong>ÂõûË¶ÜÊ¨°Êï∏Ôºö</strong>
                                    <span>@(Model.Post.ReplyCount ?? 0)</span>
                                </div>
                                <div class="mb-2">
                                    <strong>ËÆöÊï∏Ôºö</strong>
                                    <span>@(Model.Post.LikeCount ?? 0)</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Á∑®ËºØÊ≠∑Âè≤ -->
                    <div class="card shadow-sm mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-history"></i>
                                Á∑®ËºØÊ≠∑Âè≤
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (Model.EditHistory != null && Model.EditHistory.Any())
                            {
                                <div class="edit-history">
                                    @foreach (var history in Model.EditHistory.Take(5))
                                    {
                                        <div class="history-item mb-2">
                                            <small class="text-muted">
                                                @history.EditTime.ToString("MM/dd HH:mm")
                                            </small>
                                            @if (!string.IsNullOrEmpty(history.EditReason))
                                            {
                                                <div class="text-muted small">
                                                    ÂéüÂõ†Ôºö@history.EditReason
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted small">Êö´ÁÑ°Á∑®ËºØË®òÈåÑ</p>
                            }
                        </div>
                    </div>

                    <!-- Âø´ÈÄüÊìç‰Ωú -->
                    <div class="card shadow-sm">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-tools"></i>
                                Âø´ÈÄüÊìç‰Ωú
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <button type="button" class="btn btn-outline-warning btn-sm" onclick="saveAsDraft()">
                                    <i class="fas fa-save"></i> ÂÑ≤Â≠òËçâÁ®ø
                                </button>
                                <button type="button" class="btn btn-outline-info btn-sm" onclick="loadDraft()">
                                    <i class="fas fa-folder-open"></i> ËºâÂÖ•ËçâÁ®ø
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="showOriginal()">
                                    <i class="fas fa-eye"></i> Êü•ÁúãÂéüÁâà
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    }
    else
    {
        <!-- Ë≤ºÊñá‰∏çÂ≠òÂú® -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-exclamation-triangle text-warning fa-4x mb-3"></i>
                        <h4 class="text-warning">Ë≤ºÊñá‰∏çÂ≠òÂú®</h4>
                        <p class="text-muted">ÊåáÂÆöÁöÑË≤ºÊñá‰∏çÂ≠òÂú®ÊàñÂ∑≤Ë¢´Âà™Èô§„ÄÇ</p>
                        <a href="/Forum" class="btn btn-primary">
                            <i class="fas fa-arrow-left"></i> ËøîÂõûË´ñÂ£á
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- È†êË¶Ω Modal -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewModalLabel">
                    <i class="fas fa-eye"></i> Ë≤ºÊñáÈ†êË¶Ω
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modalPreviewContent"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ÈóúÈñâ</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .preview-content {
            min-height: 200px;
            border: 1px dashed #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            background-color: #f8f9fc;
        }

        .preview-content.preview-loaded {
            border: 1px solid #dee2e6;
            background-color: white;
        }

        .edit-history .history-item {
            padding: 0.5rem;
            border-radius: 0.375rem;
            background-color: #f8f9fc;
        }

        .post-info div {
            font-size: 0.9rem;
        }

        .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
        }

        .breadcrumb {
            background-color: transparent;
            padding: 0;
            margin-bottom: 1rem;
        }

        .breadcrumb-item a {
            color: #007bff;
        }

        .breadcrumb-item.active {
            color: #6c757d;
        }

        .btn-sm {
            font-size: 0.8rem;
            padding: 0.375rem 0.5rem;
        }

        /* Markdown È†êË¶ΩÊ®£Âºè */
        .markdown-preview h1, .markdown-preview h2, .markdown-preview h3,
        .markdown-preview h4, .markdown-preview h5, .markdown-preview h6 {
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .markdown-preview p {
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .markdown-preview code {
            background-color: #f8f9fc;
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
            font-family: 'Courier New', monospace;
        }

        .markdown-preview pre {
            background-color: #f8f9fc;
            padding: 1rem;
            border-radius: 0.375rem;
            overflow-x: auto;
        }

        .markdown-preview blockquote {
            border-left: 4px solid #dee2e6;
            padding-left: 1rem;
            margin-left: 0;
            color: #6c757d;
        }

        .markdown-preview ul, .markdown-preview ol {
            margin-bottom: 1rem;
            padding-left: 2rem;
        }

        .markdown-preview img {
            max-width: 100%;
            height: auto;
            border-radius: 0.375rem;
        }

        .markdown-preview a {
            color: #007bff;
            text-decoration: none;
        }

        .markdown-preview a:hover {
            text-decoration: underline;
        }

        /* ÈüøÊáâÂºèË®≠Ë®à */
        @media (max-width: 767.98px) {
            .d-flex.flex-wrap {
                flex-direction: column;
            }
            
            .d-flex.flex-wrap .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }
    </style>
}

@section Scripts {
    <script>
        let originalContent = '@Html.Raw(Model?.Post?.Content?.Replace("'", "\\'") ?? "")';
        let originalTitle = '@Html.Raw(Model?.Post?.Title?.Replace("'", "\\'") ?? "")';
        let originalTags = '@Html.Raw(Model?.Post?.Tags != null ? string.Join(", ", Model.Post.Tags).Replace("'", "\\'") : "")';

        // È†ÅÈù¢ËºâÂÖ•ÂÆåÊàêÂæåÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            // Ë°®ÂñÆÊèê‰∫§
            document.getElementById('editPostForm').addEventListener('submit', function(e) {
                e.preventDefault();
                submitEdit();
            });

            // Ëá™ÂãïÂÑ≤Â≠òËçâÁ®ø
            setInterval(autoSaveDraft, 30000); // ÊØè30ÁßíËá™ÂãïÂÑ≤Â≠ò
        });

        // È†êË¶ΩË≤ºÊñá
        function previewPost() {
            const title = document.getElementById('title').value;
            const content = document.getElementById('content').value;
            const tags = document.getElementById('tags').value;
            const type = document.getElementById('type').value;

            if (!title.trim() || !content.trim()) {
                showToast('Ë´ãÂÖàÂ°´ÂØ´Ê®ôÈ°åÂíåÂÖßÂÆπ', 'warning');
                return;
            }

            // Êõ¥Êñ∞È†êË¶ΩÂçÄÂüü
            updatePreview(title, content, tags, type);

            // È°ØÁ§∫È†êË¶Ω Modal
            const modal = new bootstrap.Modal(document.getElementById('previewModal'));
            modal.show();
        }

        // Êõ¥Êñ∞È†êË¶ΩÂÖßÂÆπ
        function updatePreview(title, content, tags, type) {
            const previewContent = document.getElementById('previewContent');
            const modalPreviewContent = document.getElementById('modalPreviewContent');

            const previewHtml = generatePreviewHtml(title, content, tags, type);

            previewContent.innerHTML = previewHtml;
            previewContent.classList.add('preview-loaded');
            modalPreviewContent.innerHTML = previewHtml;
        }

        // ÁîüÊàêÈ†êË¶Ω HTML
        function generatePreviewHtml(title, content, tags, type) {
            let html = `
                <div class="markdown-preview">
                    <h1>${title}</h1>
                    <div class="mb-3">
                        <span class="badge bg-primary me-2">${type}</span>
                        ${tags ? tags.split(',').map(tag => `<span class="badge bg-light text-dark me-1">${tag.trim()}</span>`).join('') : ''}
                    </div>
                    <div class="content-preview">
                        ${content.replace(/\n/g, '<br>')}
                    </div>
                </div>
            `;
            return html;
        }

        // ÊèíÂÖ• Markdown
        function insertMarkdown(markdown) {
            const textarea = document.getElementById('content');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            const selectedText = text.substring(start, end);
            
            let newText;
            if (markdown.includes('**') && selectedText) {
                newText = `**${selectedText}**`;
            } else if (markdown.includes('*') && selectedText) {
                newText = `*${selectedText}**`;
            } else if (markdown.includes('[') && selectedText) {
                newText = `[${selectedText}](URL)`;
            } else if (markdown.includes('![') && selectedText) {
                newText = `![${selectedText}](URL)`;
            } else if (markdown.includes('`') && selectedText) {
                newText = `\`${selectedText}\``;
            } else if (markdown.includes('```')) {
                newText = '```\nÁ®ãÂºèÁ¢ºÂçÄÂ°ä\n```';
            } else if (markdown.includes('- ')) {
                newText = '- ÂàóË°®È†ÖÁõÆ';
            } else if (markdown.includes('> ')) {
                newText = '> ÂºïÁî®ÊñáÂ≠ó';
            } else {
                newText = markdown;
            }
            
            textarea.value = text.substring(0, start) + newText + text.substring(end);
            textarea.focus();
            textarea.setSelectionRange(start + newText.length, start + newText.length);
        }

        // ÈáçÁΩÆË°®ÂñÆ
        function resetForm() {
            if (confirm('Á¢∫ÂÆöË¶ÅÈáçÁΩÆÊâÄÊúâËÆäÊõ¥ÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÂæ©Âéü„ÄÇ')) {
                document.getElementById('title').value = originalTitle;
                document.getElementById('content').value = originalContent;
                document.getElementById('tags').value = originalTags;
                document.getElementById('editReason').value = '';
                
                // ÈáçÁΩÆÈ†êË¶Ω
                const previewContent = document.getElementById('previewContent');
                previewContent.innerHTML = '<p class="text-muted text-center">ÈªûÊìäÈ†êË¶ΩÊåâÈàïÊü•ÁúãÊïàÊûú</p>';
                previewContent.classList.remove('preview-loaded');
                
                showToast('Ë°®ÂñÆÂ∑≤ÈáçÁΩÆ', 'info');
            }
        }

        // Ëá™ÂãïÂÑ≤Â≠òËçâÁ®ø
        function autoSaveDraft() {
            const title = document.getElementById('title').value;
            const content = document.getElementById('content').value;
            const tags = document.getElementById('tags').value;
            const type = document.getElementById('type').value;

            if (title.trim() || content.trim()) {
                const draft = {
                    title: title,
                    content: content,
                    tags: tags,
                    type: type,
                    timestamp: new Date().toISOString()
                };

                localStorage.setItem('forumPostDraft', JSON.stringify(draft));
            }
        }

        // ÂÑ≤Â≠òËçâÁ®ø
        function saveAsDraft() {
            autoSaveDraft();
            showToast('ËçâÁ®øÂ∑≤ÂÑ≤Â≠ò', 'success');
        }

        // ËºâÂÖ•ËçâÁ®ø
        function loadDraft() {
            const draft = localStorage.getItem('forumPostDraft');
            if (draft) {
                try {
                    const draftData = JSON.parse(draft);
                    document.getElementById('title').value = draftData.title || '';
                    document.getElementById('content').value = draftData.content || '';
                    document.getElementById('tags').value = draftData.tags || '';
                    document.getElementById('type').value = draftData.type || 'discussion';
                    
                    showToast('ËçâÁ®øÂ∑≤ËºâÂÖ•', 'success');
                } catch (error) {
                    showToast('ËºâÂÖ•ËçâÁ®øÂ§±Êïó', 'error');
                }
            } else {
                showToast('Ê≤íÊúâÊâæÂà∞ËçâÁ®ø', 'info');
            }
        }

        // Êü•ÁúãÂéüÁâà
        function showOriginal() {
            const modal = new bootstrap.Modal(document.getElementById('previewModal'));
            const modalPreviewContent = document.getElementById('modalPreviewContent');
            
            const originalHtml = generatePreviewHtml(originalTitle, originalContent, originalTags, '@Model?.Post?.Type');
            modalPreviewContent.innerHTML = `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>ÂéüÂßãÁâàÊú¨</strong>
                </div>
                ${originalHtml}
            `;
            
            modal.show();
        }

        // Êèê‰∫§Á∑®ËºØ
        function submitEdit() {
            const title = document.getElementById('title').value.trim();
            const content = document.getElementById('content').value.trim();
            const tags = document.getElementById('tags').value.trim();
            const type = document.getElementById('type').value;
            const editReason = document.getElementById('editReason').value.trim();
            const notifyFollowers = document.getElementById('notifyFollowers').checked;

            if (!title) {
                showToast('Ë´ãËº∏ÂÖ•Ê®ôÈ°å', 'warning');
                document.getElementById('title').focus();
                return;
            }

            if (!content) {
                showToast('Ë´ãËº∏ÂÖ•ÂÖßÂÆπ', 'warning');
                document.getElementById('content').focus();
                return;
            }

            // Ê™¢Êü•ÊòØÂê¶ÊúâËÆäÊõ¥
            if (title === originalTitle && content === originalContent && tags === originalTags && type === '@Model?.Post?.Type') {
                showToast('Ê≤íÊúâÁôºÁèæ‰ªª‰ΩïËÆäÊõ¥', 'warning');
                return;
            }

            // Êèê‰∫§Ë°®ÂñÆ
            const formData = new FormData(document.getElementById('editPostForm'));
            formData.append('PostId', @(Model?.Post?.Id ?? 0));

            fetch('/api/forum/post/update', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    postId: @(Model?.Post?.Id ?? 0),
                    title: title,
                    content: content,
                    tags: tags ? tags.split(',').map(t => t.trim()).filter(t => t) : [],
                    type: type,
                    editReason: editReason,
                    notifyFollowers: notifyFollowers
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Ë≤ºÊñáÊõ¥Êñ∞ÊàêÂäü', 'success');
                    // Ê∏ÖÈô§ËçâÁ®ø
                    localStorage.removeItem('forumPostDraft');
                    // Ë∑≥ËΩâÂà∞Ë≤ºÊñáÈ†ÅÈù¢
                    setTimeout(() => {
                        window.location.href = `/Forum/Post/@Model?.Post?.Id`;
                    }, 1500);
                } else {
                    showToast(`Êõ¥Êñ∞Â§±ÊïóÔºö${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Êõ¥Êñ∞ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ', 'error');
            });
        }

        // È°ØÁ§∫ÊèêÁ§∫Ë®äÊÅØ
        function showToast(message, type = 'info') {
            if (type === 'success') {
                alert('‚úÖ ' + message);
            } else if (type === 'error') {
                alert('‚ùå ' + message);
            } else if (type === 'warning') {
                alert('‚ö†Ô∏è ' + message);
            } else {
                alert(message);
            }
        }

        // È†ÅÈù¢Èõ¢ÈñãÂâçÊèêÈÜíÂÑ≤Â≠ò
        window.addEventListener('beforeunload', function(e) {
            const title = document.getElementById('title').value;
            const content = document.getElementById('content').value;
            
            if ((title !== originalTitle || content !== originalContent) && (title.trim() || content.trim())) {
                e.preventDefault();
                e.returnValue = 'ÊÇ®ÊúâÊú™ÂÑ≤Â≠òÁöÑËÆäÊõ¥ÔºåÁ¢∫ÂÆöË¶ÅÈõ¢ÈñãÂóéÔºü';
                return 'ÊÇ®ÊúâÊú™ÂÑ≤Â≠òÁöÑËÆäÊõ¥ÔºåÁ¢∫ÂÆöË¶ÅÈõ¢ÈñãÂóéÔºü';
            }
        });
    </script>
}