@{
    ViewData["Title"] = "GameCore｜遊戲社群平台";
}

<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"]</title>
    <style>
        :root{
            --bg:#eef3f8; 
            --bg2:#ffffff; 
            --ink:#1f2937; 
            --muted:#64748b; 
            --line:#e5e7eb; 
            --surface:rgba(255,255,255,.75); 
            --glass:rgba(255,255,255,.45); 
            --accent:#7557ff; 
            --accent-2:#34d2ff; 
            --accent-3:#22c55e; 
            --radius:18px; 
            --radius-sm:12px; 
            --shadow:0 18px 40px rgba(17,24,39,.12); 
            --blur:14px;
            /* 排行榜配色 */
            --ok:#22c55e; 
            --down:#ff6b6b; 
            --flat:#9aa8bf; 
            --gold:#FFD700; 
            --silver:#C0C0C0; 
            --bronze:#CD7F32; 
            --goldA:rgba(255,215,0,.18); 
            --silverA:rgba(192,192,192,.18); 
            --bronzeA:rgba(205,127,50,.18);
        }

        body.dark{
            --bg:#0c111b; 
            --bg2:#0a0f18; 
            --ink:#e5edff; 
            --muted:#9fb1c9; 
            --line:#1e2b43; 
            --surface:rgba(22,30,48,.65); 
            --glass:rgba(18,24,39,.50); 
            --shadow:0 18px 42px rgba(0,0,0,.35);
        }

        body.compact{
            --radius:14px; 
            --radius-sm:10px
        }

        *{box-sizing:border-box}
        html,body{height:100%}
        body{
            margin:0; 
            color:var(--ink); 
            font:16px/1.65 system-ui,-apple-system,"Segoe UI",Roboto,"Noto Sans TC","PingFang TC","Microsoft JhengHei",sans-serif; 
            background: radial-gradient(900px 500px at -10% -10%, rgba(117,87,255,.10), transparent 60%), radial-gradient(800px 460px at 110% 10%, rgba(52,210,255,.10), transparent 50%), linear-gradient(180deg, var(--bg), var(--bg2));
        }

        a{color:inherit; text-decoration:none}
        .wrap{max-width:1380px; margin:0 auto; padding:0 16px}

        /* AppBar */
        header.appbar{position:sticky; top:0; z-index:50; backdrop-filter:saturate(140%) blur(var(--blur)); background:var(--glass); border-bottom:1px solid var(--line)}
        .bar{display:flex; align-items:center; gap:12px; padding:10px 0}
        .logo{display:flex; align-items:center; gap:10px; font-weight:900}
        .logo-badge{width:36px; height:36px; border-radius:10px; background:linear-gradient(135deg,var(--accent), var(--accent-2)); color:#fff; display:grid; place-items:center; box-shadow:var(--shadow)}
        .search{flex:1; display:flex; gap:8px; background:var(--surface); border:1px solid var(--line); border-radius:12px; padding:8px 10px}
        .search input{flex:1; background:transparent; border:0; outline:0; color:inherit}
        .main-nav{display:flex; gap:8px; flex-wrap:wrap}
        .pill{display:inline-flex; align-items:center; gap:6px; border:1px solid var(--line); background:var(--surface); padding:8px 12px; border-radius:999px; font-weight:700; transition:all 0.2s ease}
        .pill.on{background:linear-gradient(90deg,#3b82f6,#a78bfa); color:#fff; border-color:transparent}
        .pill:hover{background:linear-gradient(90deg,#3b82f6,#a78bfa); color:#fff; border-color:transparent}
        .top-actions{display:flex; gap:8px; align-items:center}
        .btn{border:1px solid var(--line); background:var(--surface); padding:8px 12px; border-radius:12px; cursor:pointer; transition:all 0.2s ease}
        .btn.primary{border:0; background:linear-gradient(135deg,var(--accent),#3b82f6); color:#fff; box-shadow:var(--shadow)}
        .btn.link{background:transparent; border:1px dashed var(--line)}
        .btn:hover{transform:translateY(-2px); box-shadow:var(--shadow)}
        .switch{display:flex; align-items:center; gap:6px; font-size:13px}
        .dot{width:16px; height:16px; border-radius:50%; border:1px solid var(--line); cursor:pointer}
        .dot.c1{background:#7557ff}.dot.c2{background:#34d2ff}.dot.c3{background:#22c55e}

        /* Tiles（彩色看板） */
        .tiles{padding:16px 0}
        .grid-tiles{display:grid; gap:12px; grid-template-columns:repeat(6, minmax(0,1fr))}
        @@media (max-width:1100px){.grid-tiles{grid-template-columns:repeat(4, minmax(0,1fr))}}
        @@media (max-width:740px){.grid-tiles{grid-template-columns:repeat(2, minmax(0,1fr))}}
        .tile{position:relative; min-height:120px; border-radius:16px; padding:14px; overflow:hidden; display:flex; flex-direction:column; justify-content:space-between; cursor:pointer; background:var(--glass); border:1px solid var(--line); backdrop-filter:blur(var(--blur)); transition:transform .16s ease, box-shadow .16s ease, filter .2s ease; box-shadow:var(--shadow)}
        .tile:hover{transform:translateY(-3px) scale(1.01)}
        .tile .name{font-weight:900}
        .tile .meta{color:var(--muted); font-size:12px}
        .mini{background:rgba(255,255,255,.65); padding:2px 8px; border-radius:999px; font-size:12px; border:1px solid var(--line)}
        body.dark .mini{background:rgba(0,0,0,.25); color:#e5edff}

        /* 彩色漸層（看板） */
        .tile.colorful:nth-child(1){background:linear-gradient(135deg,#4f46e5,#22d3ee)}
        .tile.colorful:nth-child(2){background:linear-gradient(135deg,#f43f5e,#f59e0b)}
        .tile.colorful:nth-child(3){background:linear-gradient(135deg,#22c55e,#16a34a)}
        .tile.colorful:nth-child(4){background:linear-gradient(135deg,#8b5cf6,#06b6d4)}
        .tile.colorful:nth-child(5){background:linear-gradient(135deg,#f97316,#ef4444)}
        .tile.colorful:nth-child(6){background:linear-gradient(135deg,#06b6d4,#3b82f6)}
        .tile.colorful .name,.tile.colorful .meta,.tile.colorful .mini{color:#fff}
        .tile.colorful .mini{background:rgba(255,255,255,.25); border-color:rgba(255,255,255,.35)}

        /* Hot（橫向） */
        .hot{background:var(--glass); border:1px solid var(--line); border-radius:16px; padding:14px; backdrop-filter:blur(var(--blur)); box-shadow:var(--shadow)}
        .head{display:flex; align-items:center; gap:10px; margin-bottom:10px}
        .kicker{font-size:12px; letter-spacing:.12em; color:#6366f1}
        .scroller{display:flex; gap:12px; overflow:auto; scroll-snap-type:x mandatory; padding-bottom:6px}
        .card{min-width:280px; background:var(--surface); border:1px solid var(--line); border-radius:16px; padding:12px; scroll-snap-align:start; transition:transform .16s ease, box-shadow .16s ease}
        .card:hover{transform:translateY(-3px) scale(1.01); box-shadow:var(--shadow)}

        /* Main layout */
        main{margin:16px 0 28px}
        .layout{display:grid; grid-template-columns:1fr 360px; gap:16px}
        @@media (max-width:980px){.layout{grid-template-columns:1fr}}
        .panel{background:var(--surface); border:1px solid var(--line); border-radius:16px; box-shadow:var(--shadow); padding:14px; backdrop-filter:blur(var(--blur))}
        .panel .hd{display:flex; align-items:center; gap:10px; margin-bottom:10px}
        .panel .title{font-weight:900}
        .seg{display:inline-flex; border:1px solid var(--line); border-radius:999px; overflow:hidden; margin-left:auto}
        .seg button{background:transparent; border:0; color:var(--muted); padding:6px 10px; cursor:pointer}
        .seg .on{background:#1f7ae0; color:#fff}
        .feed{display:grid; gap:10px}
        .row{display:grid; grid-template-columns:auto 1fr auto; gap:10px; align-items:center; border:1px solid var(--line); border-radius:14px; padding:10px; background:var(--bg2); transition:transform .16s ease, box-shadow .16s ease}
        .row:hover{transform:translateY(-3px) scale(1.01); box-shadow:var(--shadow)}
        .av{width:40px; height:40px; border-radius:12px; background:linear-gradient(135deg,#bae6fd,#e9d5ff); display:grid; place-items:center; font-weight:900; color:#334155}
        .meta{display:flex; gap:8px; flex-wrap:wrap; color:var(--muted); font-size:13px; margin-top:2px}
        .chip{border:1px solid var(--line); padding:2px 8px; border-radius:999px; background:var(--surface)}
        .ghost{border:1px solid var(--line); background:var(--surface); border-radius:10px; padding:6px 10px}

        /* 置頂區 */
        .pinned{border:2px dashed #c4b5fd; background:rgba(196,181,253,.15); padding:10px; border-radius:12px}
        .pinned .row{background:transparent}

        /* 右側：原有黏性、個別卡片可再 sticky */
        .right{align-self:start; position:sticky; top:calc(50vh - 320px)}
        .stack{display:flex; flex-direction:column; gap:16px}

        /* 跑馬燈 */
        .ticker{position:relative; overflow:hidden; border:1px solid var(--line); background:var(--surface); border-radius:12px}
        .ticker .track{display:flex; gap:32px; padding:10px 12px; white-space:nowrap; animation:ticker 10s linear infinite}
        @@keyframes ticker{0%{transform:translateX(0)}100%{transform:translateX(-50%)}}

        /* 排行榜 */
        .list{display:flex; flex-direction:column; gap:8px}
        .rrow{position:relative; display:grid; grid-template-columns:40px 1fr auto; gap:10px; align-items:center; border:1px solid var(--line); background:var(--bg2); border-radius:12px; padding:10px; overflow:hidden}
        .rank{font-weight:900; text-align:center}
        .delta{text-align:right; min-width:64px; font-weight:800}
        .up{color:var(--ok)} .down{color:var(--down)} .flat{color:var(--flat)}
        .rrow.top::before{content:""; position:absolute; inset:0; pointer-events:none; z-index:0; opacity:.9; filter:blur(14px)}
        .rrow.top1::before{background:linear-gradient(90deg,var(--goldA),transparent 60%)}
        .rrow.top2::before{background:linear-gradient(90deg,var(--silverA),transparent 60%)}
        .rrow.top3::before{background:linear-gradient(90deg,var(--bronzeA),transparent 60%)}
        .rrow.top1 .rank, .rrow.top1 .title-2{color:var(--gold)}
        .rrow.top2 .rank, .rrow.top2 .title-2{color:var(--silver)}
        .rrow.top3 .rank, .rrow.top3 .title-2{color:var(--bronze)}
        .rrow > *{position:relative; z-index:1}

        /* 我的史萊姆卡片 */
        .gc-right-sticky{position: sticky; top:16px;}
        .gc-pet-card{
            font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
            background:#1f2430;
            color:#e9ecf1;
            border:1px solid #0006;
            border-radius:12px;
            box-shadow:0 8px 24px #0004, inset 0 1px 0 #fff1;
            padding:12px;
            width:100%;
        }
        .gc-pet-head{display:flex; align-items:center; justify-content:space-between; margin-bottom:8px;}
        .gc-pet-title{font-weight:700; letter-spacing:.5px;}
        .gc-sub{color:#aeb6d9;}
        .gc-coins{background:#262d3d; border:1px solid #0006; padding:4px 8px; border-radius:999px;}
        .gc-pet-canvas-wrap{display:flex; justify-content:center; margin:6px 0 10px;}
        #gc-pet-canvas{image-rendering: pixelated; width:160px; height:160px; background:#9ee37d; border:1px solid #0006; border-radius:8px;}
        .gc-stats{display:grid; grid-template-columns:1fr; gap:6px; margin-bottom:8px;}
        .gc-stat{display:grid; grid-template-columns:auto 1fr auto; gap:8px; align-items:center;}
        .gc-bar{height:10px; background:#2b3142; border:1px solid #0008; border-radius:6px; overflow:hidden;}
        .gc-bar i{display:block; height:100%; width:0%; background:linear-gradient(90deg,#6de38d,#35c47e); transition:width .25s;}
        .gc-bar.warn i{background:linear-gradient(90deg,#ffd159,#ffba4b);}
        .gc-bar.bad i{background:linear-gradient(90deg,#ff7b72,#ff5d6a);}
        .gc-actions{display:grid; grid-template-columns:repeat(5,1fr); gap:6px; margin-bottom:8px;}
        .gc-actions button{background:#2e3440; color:#fff; border:1px solid #0006; border-radius:10px; padding:8px 6px; cursor:pointer; transition:all 0.2s ease;}
        .gc-actions button:hover{background:#3b4252; transform:translateY(-1px);}
        .gc-actions .gc-accent{background:#5661ff; grid-column:span 5;}
        .gc-log{list-style:none; padding:8px; margin:0; max-height:120px; overflow:auto; background:#262d3d; border:1px solid #0006; border-radius:10px; font-size:12px; color:#c7d0ff;}
        .gc-log li{margin:0 0 6px;}
        .gc-log .warn{color:#ffe08a;}
        .gc-log .bad{color:#ff9b93;}

        /* Modal */
        .modal{position:fixed; inset:0; background:rgba(8,12,20,.85); display:none; align-items:center; justify-content:center; padding:24px; z-index:9999}
        .modal.show{display:flex}
        .modal .panel{position:relative; background:var(--surface); border:1px solid var(--line); border-radius:20px; max-width:980px; width:100%; max-height:86vh; overflow:auto; padding:18px 18px 22px; display:flex; flex-direction:column; gap:12px; backdrop-filter:blur(var(--blur))}
        .closeX{position:absolute; top:12px; right:12px; border:1px solid var(--line); background:var(--surface); border-radius:50%; width:36px; height:36px; cursor:pointer; display:grid; place-items:center}

        footer{color:var(--muted); text-align:center; padding:20px 0; border-top:1px solid var(--line)}
    </style>
</head>
<body>
    <!-- AppBar -->
    <header class="appbar">
        <div class="wrap bar">
            <a class="logo" href="/"><span class="logo-badge">GC</span><span>GameCore</span></a>
            
            <form class="search" method="get" action="/Search">
                <input name="q" type="search" placeholder="搜尋文章 / 分區 / 標籤…" aria-label="搜尋"/>
                <button type="submit" class="btn">搜尋</button>
            </form>
            
            <nav class="main-nav" aria-label="主導覽">
                <a class="pill" href="/Profile">個人中心</a>
                <a class="pill" href="/SignIn">每日簽到</a>
                <a class="pill on" href="/Forum">論壇</a>
                <a class="pill" href="/Pet">我的史萊姆</a>
                <a class="pill" href="/Store">官方商城</a>
                <a class="pill" href="/Market">玩家市集</a>
                <a class="pill" href="/Rankings">排行榜</a>
            </nav>
            
            <div class="top-actions">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <span>歡迎, @User.Identity.Name</span>
                    <a href="/Account/Logout" class="btn">登出</a>
                }
                else
                {
                    <a href="/Account/Login" class="btn primary">登入</a>
                    <a href="/Account/Register" class="btn">註冊</a>
                }
                <label class="switch"><input id="t-dark" type="checkbox"/> 深色</label>
                <label class="switch"><input id="t-density" type="checkbox"/> 緊湊</label>
                <div class="switch" title="主色">
                    <span class="dot c1" data-accent="#7557ff"></span>
                    <span class="dot c2" data-accent="#34d2ff"></span>
                    <span class="dot c3" data-accent="#22c55e"></span>
                </div>
                <button class="btn primary" id="btnNew">＋ 發表主題</button>
            </div>
        </div>
    </header>

    <!-- 看板 Tiles -->
    <section class="wrap tiles" aria-label="看板彩色小卡">
        <div class="grid-tiles" id="tileGrid"></div>
    </section>

    <!-- Hot Threads -->
    <section class="wrap">
        <article class="hot">
            <div class="head"><span class="kicker">Hot Threads</span><strong>熱門精選</strong></div>
            <div class="scroller" id="hotScroller"></div>
        </article>
    </section>

    <!-- Main -->
    <main class="wrap layout">
        <!-- 中欄：文章 Feed -->
        <section class="panel">
            <div class="hd">
                <div class="title">最新文章</div>
                <span id="feedCount" class="muted" style="margin-left:8px"></span>
                <div class="seg" role="tablist" aria-label="快速篩選">
                    <button id="all" class="on" aria-selected="true">全部</button>
                    <button id="lol">LOL</button>
                    <button id="steam">Steam</button>
                    <button id="mobile">手遊</button>
                    <button id="genshin">原神</button>
                    <button id="mood">心情板</button>
                </div>
            </div>
            
            <!-- 置頂區 -->
            <div id="pinned" class="pinned" aria-label="置頂文章"></div>
            <div class="feed" id="feed"></div>
            
            <div style="text-align:center;margin-top:12px">
                <a class="btn primary" href="/Forum" id="btnMoreFeed">查看更多</a>
            </div>
        </section>

        <!-- 右欄 -->
        <aside class="right">
            <div class="stack">
                <!-- 我的史萊姆卡片 -->
                <aside class="gc-right-sticky">
                    <div class="gc-pet-card" id="gc-pet-card">
                        <header class="gc-pet-head">
                            <div>
                                <div class="gc-pet-title">我的史萊姆</div>
                                <small class="gc-sub">
                                    <span id="gc-pet-name">小可愛</span> · Lv.<b id="gc-pet-lv">1</b> · XP <b id="gc-pet-xp">0</b>/<b id="gc-pet-xpmax">50</b>
                                </small>
                            </div>
                            <div class="gc-coins">💰 <b id="gc-coins">0</b></div>
                        </header>
                        
                        <div class="gc-pet-canvas-wrap">
                            <canvas id="gc-pet-canvas" width="120" height="120"></canvas>
                        </div>
                        
                        <div class="gc-stats">
                            <div class="gc-stat"><label>飢餓</label><div class="gc-bar"><i id="bar-hunger"></i></div><span id="txt-hunger">100</span></div>
                            <div class="gc-stat"><label>心情</label><div class="gc-bar"><i id="bar-mood"></i></div><span id="txt-mood">100</span></div>
                            <div class="gc-stat"><label>體力</label><div class="gc-bar"><i id="bar-energy"></i></div><span id="txt-energy">100</span></div>
                            <div class="gc-stat"><label>清潔</label><div class="gc-bar"><i id="bar-clean"></i></div><span id="txt-clean">100</span></div>
                            <div class="gc-stat"><label>健康</label><div class="gc-bar"><i id="bar-health"></i></div><span id="txt-health">100</span></div>
                        </div>
                        
                        <div class="gc-actions">
                            <button data-act="Feed">餵食</button>
                            <button data-act="Bath">洗澡</button>
                            <button data-act="Play">玩耍</button>
                            <button data-act="Rest">休息</button>
                            <button class="gc-accent" id="gc-adv">出發冒險（每日 3 次）</button>
                        </div>
                        
                        <ul class="gc-log" id="gc-log"></ul>
                    </div>
                </aside>

                <!-- 公告跑馬燈 -->
                <article class="ticker" aria-label="公告跑馬燈">
                    <div class="track" id="ticker"></div>
                </article>

                <!-- 排行榜 -->
                <article class="panel">
                    <div class="hd">
                        <div class="title">跨平台熱門</div>
                        <div class="seg">
                            <button id="mix7b" class="on">近 7 天</button>
                            <button id="mix30b">近 30 天</button>
                        </div>
                    </div>
                    <div id="mixList" class="list"></div>
                </article>
            </div>
        </aside>
    </main>

    <!-- Modal -->
    <div class="modal" id="modal">
        <div class="panel">
            <button class="closeX" id="closeModal">×</button>
            <div id="modalContent"></div>
        </div>
    </div>

    <footer class="wrap">© 2025 GameCore — 遊戲社群平台</footer>

    <script>
        // GameCore 主要 JavaScript 邏輯
        class GameCore {
            constructor() {
                this.pet = null;
                this.userPoints = 0;
                this.init();
            }

            async init() {
                await this.loadPetData();
                await this.loadUserData();
                this.bindEvents();
                this.startPetAnimation();
                this.loadForumData();
                this.setupThemeToggle();
            }

            // 載入寵物資料
            async loadPetData() {
                try {
                    const response = await fetch('/api/pet');
                    if (response.ok) {
                        this.pet = await response.json();
                        this.updatePetUI();
                    } else {
                        console.log('未登入或無寵物資料，使用預設值');
                        this.pet = this.getDefaultPet();
                        this.updatePetUI();
                    }
                } catch (error) {
                    console.error('載入寵物資料失敗:', error);
                    this.pet = this.getDefaultPet();
                    this.updatePetUI();
                }
            }

            // 載入使用者資料
            async loadUserData() {
                try {
                    const response = await fetch('/api/wallet/balance');
                    if (response.ok) {
                        const data = await response.json();
                        this.userPoints = data.balance || 0;
                        document.getElementById('gc-coins').textContent = this.userPoints;
                    }
                } catch (error) {
                    console.error('載入使用者資料失敗:', error);
                }
            }

            // 預設寵物資料
            getDefaultPet() {
                return {
                    name: '小可愛',
                    level: 1,
                    experience: 0,
                    nextLevelExp: 100,
                    hunger: 100,
                    mood: 100,
                    stamina: 100,
                    cleanliness: 100,
                    health: 100,
                    skinColor: '#f6d84a',
                    backgroundColor: '#79b7ff'
                };
            }

            // 更新寵物 UI
            updatePetUI() {
                if (!this.pet) return;

                document.getElementById('gc-pet-name').textContent = this.pet.name;
                document.getElementById('gc-pet-lv').textContent = this.pet.level;
                document.getElementById('gc-pet-xp').textContent = this.pet.experience;
                document.getElementById('gc-pet-xpmax').textContent = this.pet.nextLevelExp;

                this.updateStatBar('hunger', this.pet.hunger);
                this.updateStatBar('mood', this.pet.mood);
                this.updateStatBar('energy', this.pet.stamina);
                this.updateStatBar('clean', this.pet.cleanliness);
                this.updateStatBar('health', this.pet.health);
            }

            // 更新屬性條
            updateStatBar(statName, value) {
                const bar = document.getElementById(`bar-${statName}`);
                const text = document.getElementById(`txt-${statName}`);
                
                if (bar && text) {
                    const clampedValue = Math.max(0, Math.min(100, value));
                    text.textContent = clampedValue;
                    bar.style.width = clampedValue + '%';
                    
                    const barContainer = bar.parentElement;
                    barContainer.classList.remove('warn', 'bad');
                    
                    if (clampedValue < 20) {
                        barContainer.classList.add('bad');
                    } else if (clampedValue < 40) {
                        barContainer.classList.add('warn');
                    }
                }
            }

            // 綁定事件
            bindEvents() {
                // 寵物互動按鈕
                document.querySelectorAll('.gc-actions button[data-act]').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        const action = e.target.getAttribute('data-act');
                        this.performPetInteraction(action);
                    });
                });

                // 冒險按鈕
                document.getElementById('gc-adv')?.addEventListener('click', () => {
                    this.startAdventure();
                });

                // 主題切換
                document.getElementById('t-dark')?.addEventListener('change', (e) => {
                    document.body.classList.toggle('dark', e.target.checked);
                });

                document.getElementById('t-density')?.addEventListener('change', (e) => {
                    document.body.classList.toggle('compact', e.target.checked);
                });

                // 主色切換
                document.querySelectorAll('.dot').forEach(dot => {
                    dot.addEventListener('click', () => {
                        const accent = dot.getAttribute('data-accent');
                        document.documentElement.style.setProperty('--accent', accent);
                    });
                });
            }

            // 執行寵物互動
            async performPetInteraction(action) {
                try {
                    const response = await fetch('/api/pet/interact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ action: action })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        
                        // 更新寵物狀態
                        if (result.pet) {
                            this.pet.hunger = result.pet.hunger;
                            this.pet.mood = result.pet.mood;
                            this.pet.stamina = result.pet.stamina;
                            this.pet.cleanliness = result.pet.cleanliness;
                            this.pet.health = result.pet.health;
                            this.updatePetUI();
                        }

                        this.addLog(result.message);
                        
                        if (result.healthRestored) {
                            this.addLog('🌟 四維屬性全滿！健康度完全恢復！', 'good');
                        }

                        // 播放互動動畫
                        this.playInteractionAnimation(action);
                    } else {
                        const error = await response.json();
                        this.addLog(error.message || '互動失敗', 'warn');
                    }
                } catch (error) {
                    console.error('寵物互動失敗:', error);
                    this.addLog('互動失敗，請稍後再試', 'warn');
                }
            }

            // 開始冒險
            async startAdventure() {
                try {
                    // 先檢查是否可以冒險
                    const checkResponse = await fetch('/api/pet/can-adventure');
                    if (checkResponse.ok) {
                        const checkResult = await checkResponse.json();
                        if (!checkResult.canAdventure) {
                            this.addLog(checkResult.message, 'warn');
                            return;
                        }
                    }

                    // 跳轉到小遊戲頁面
                    window.location.href = '/MiniGame';
                } catch (error) {
                    console.error('檢查冒險條件失敗:', error);
                    this.addLog('無法開始冒險，請稍後再試', 'warn');
                }
            }

            // 播放互動動畫
            playInteractionAnimation(action) {
                const canvas = document.getElementById('gc-pet-canvas');
                if (canvas) {
                    canvas.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        canvas.style.transform = 'scale(1)';
                    }, 200);
                }
            }

            // 添加日誌
            addLog(message, type = 'info') {
                const logContainer = document.getElementById('gc-log');
                if (!logContainer) return;

                const li = document.createElement('li');
                if (type !== 'info') {
                    li.className = type;
                }
                li.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
                
                logContainer.insertBefore(li, logContainer.firstChild);
                
                // 限制日誌數量
                while (logContainer.children.length > 10) {
                    logContainer.removeChild(logContainer.lastChild);
                }
            }

            // 開始寵物動畫
            startPetAnimation() {
                const canvas = document.getElementById('gc-pet-canvas');
                const ctx = canvas?.getContext('2d');
                if (!canvas || !ctx) return;

                ctx.imageSmoothingEnabled = false;
                let frame = 0;

                const animate = () => {
                    frame++;
                    this.drawPet(ctx, canvas.width, canvas.height, frame);
                    requestAnimationFrame(animate);
                };

                animate();
            }

            // 繪製寵物 (像素風格史萊姆)
            drawPet(ctx, width, height, frame) {
                if (!this.pet) return;

                // 清空畫布
                ctx.fillStyle = this.pet.backgroundColor || '#79b7ff';
                ctx.fillRect(0, 0, width, height);

                // 繪製地面
                ctx.fillStyle = '#91e27c';
                ctx.fillRect(0, height - 36, width, 36);

                // 計算史萊姆位置 (浮動效果)
                const baseY = height - 36 - 44;
                const floatY = baseY + Math.sin(frame / 12) * 2;

                // 繪製史萊姆身體
                ctx.fillStyle = this.pet.skinColor || '#f6d84a';
                ctx.fillRect(40, floatY, 40, 34);

                // 繪製陰影
                ctx.fillStyle = '#e1c146';
                ctx.fillRect(40, floatY + 4, 40, 3);

                // 繪製輪廓
                ctx.fillStyle = '#000';
                this.drawPixelBorder(ctx, 40, floatY, 40, 34);

                // 繪製眼睛 (眨眼效果)
                const blinkFrame = (frame % 120 < 6) ? 1 : 3;
                this.drawEye(ctx, 52, floatY + 10, blinkFrame);
                this.drawEye(ctx, 66, floatY + 10, blinkFrame);

                // 繪製嘴巴 (根據心情)
                this.drawMouth(ctx, floatY + 22);

                // 繪製污垢 (根據清潔度)
                if (this.pet.cleanliness < 50) {
                    this.drawDirt(ctx, floatY);
                }

                // 繪製睡眠效果 (根據體力)
                if (this.pet.stamina < 20) {
                    this.drawSleepEffect(ctx, floatY);
                }
            }

            // 繪製像素邊框
            drawPixelBorder(ctx, x, y, w, h) {
                ctx.fillRect(x - 1, y - 1, w + 2, 1);
                ctx.fillRect(x - 1, y + h, w + 2, 1);
                ctx.fillRect(x - 1, y - 1, 1, h + 2);
                ctx.fillRect(x + w, y - 1, 1, h + 2);
            }

            // 繪製眼睛
            drawEye(ctx, x, y, height) {
                ctx.fillStyle = '#fff';
                ctx.fillRect(x - 1, y - 1, 5, height + 2);
                
                ctx.fillStyle = '#000';
                ctx.fillRect(x - 2, y - 2, 7, 1);
                ctx.fillRect(x - 2, y + height + 1, 7, 1);
                ctx.fillRect(x - 2, y - 2, 1, height + 4);
                ctx.fillRect(x + 4, y - 2, 1, height + 4);
                
                if (height > 1) {
                    ctx.fillRect(x + 1, y, 1, height);
                }
            }

            // 繪製嘴巴
            drawMouth(ctx, y) {
                ctx.fillStyle = '#000';

                if (this.pet.mood >= 60) {
                    // 開心：微笑
                    ctx.fillRect(57, y, 8, 1);
                    ctx.fillRect(59, y + 1, 4, 1);
                } else if (this.pet.mood >= 30) {
                    // 普通：直線
                    ctx.fillRect(57, y, 8, 1);
                } else {
                    // 難過：倒笑
                    ctx.fillRect(57, y + 1, 8, 1);
                    ctx.fillRect(59, y, 4, 1);
                }
            }

            // 繪製污垢
            drawDirt(ctx, baseY) {
                ctx.fillStyle = '#7f6a2a';
                ctx.fillRect(46, baseY + 18, 2, 2);
                ctx.fillRect(72, baseY + 14, 1, 2);
            }

            // 繪製睡眠效果
            drawSleepEffect(ctx, baseY) {
                ctx.fillStyle = '#fff';
                ctx.font = '10px monospace';
                ctx.fillText('Z', 86, baseY + 6);
                ctx.fillText('z', 92, baseY + 12);
            }

            // 載入論壇資料 (假資料展示)
            loadForumData() {
                this.loadBoards();
                this.loadHotThreads();
                this.loadTicker();
                this.loadFeed();
                this.loadRankings();
            }

            loadBoards() {
                const boards = [
                    {key:'lol', name:'英雄聯盟', intro:'版本情報、電競賽事、教學攻略'},
                    {key:'genshin', name:'原神', intro:'角色配隊、抽卡心得、世界探索'},
                    {key:'steam', name:'Steam 綜合', intro:'促銷情報、遊戲心得、實況討論'},
                    {key:'mobile', name:'手機遊戲', intro:'Android / iOS 手遊討論'},
                    {key:'general', name:'綜合討論', intro:'硬體外設、雜談灌水、求助問答'},
                    {key:'mood', name:'心情板', intro:'日常、告白、碎碎念、抱怨'}
                ];

                const tileGrid = document.getElementById('tileGrid');
                if (tileGrid) {
                    tileGrid.innerHTML = boards.map((b, i) => `
                                        <a class="tile colorful" href="/Forum/${b.key}" data-board="${b.key}">
                    <div class="name">${b.name}</div>
                    <div class="meta">${b.intro}</div>
                    <div style="display:flex; gap:6px; flex-wrap:wrap; margin-top:6px">
                        <span class="mini">今日新貼 ${Math.floor(Math.random()*40)+6}</span>
                        <span class="mini">活躍 ${Math.floor(Math.random()*200)+40}</span>
                    </div>
                </a>
                    `).join('');
                }
            }

            loadHotThreads() {
                const hotThreads = [
                    '【攻略】新手入門完整指南 - 從零開始的遊戲之路',
                    '【情報】下週版本更新內容搶先看',
                    '【心得】三個月遊戲心得分享',
                    '【討論】大家最喜歡的角色是誰？',
                    '【活動】社群活動開跑，豐富獎品等你拿！'
                ];

                const hotScroller = document.getElementById('hotScroller');
                if (hotScroller) {
                    hotScroller.innerHTML = hotThreads.map(title => `
                        <article class="card">
                            <div style="font-weight:900">${title}</div>
                            <div style="color:var(--muted); font-size:13px">點擊查看完整內容...</div>
                            <div style="display:flex; gap:8px; margin-top:8px">
                                <span class="chip">熱門</span>
                                <span class="chip">精華</span>
                            </div>
                        </article>
                    `).join('');
                }
            }

            loadTicker() {
                const bulletins = [
                    '【活動】投稿最佳攻略贏鍵盤滑鼠組',
                    '【公告】站務規範更新，請勿張貼攻擊性言論',
                    '【社群】本月達標 2,000 則優質回覆，感謝大家！',
                    '【修復】行動端卡片重疊問題已修正'
                ];

                const ticker = document.getElementById('ticker');
                if (ticker) {
                    const twice = bulletins.concat(bulletins);
                    ticker.innerHTML = twice.map(t => `<span>🔔 ${t}</span>`).join('<span>·</span>');
                }
            }

            loadFeed() {
                // 載入文章動態 (假資料)
                const posts = [
                    { title: '新版本角色強度分析', author: '攻略大師', time: '2小時前', likes: 128, replies: 45 },
                    { title: '週末活動心得分享', author: '遊戲玩家', time: '4小時前', likes: 89, replies: 23 },
                    { title: '裝備搭配推薦指南', author: '專業玩家', time: '6小時前', likes: 156, replies: 67 }
                ];

                const feed = document.getElementById('feed');
                if (feed) {
                    feed.innerHTML = posts.map(post => `
                        <article class="row">
                            <div class="av">${post.author[0]}</div>
                            <div>
                                <div style="font-weight:900">${post.title}</div>
                                <div class="meta">
                                    <span>${post.author}</span>
                                    <span>｜</span>
                                    <span>${post.time}</span>
                                </div>
                            </div>
                            <div style="display:flex; gap:8px">
                                <span class="ghost">❤️ ${post.likes}</span>
                                <span class="ghost">💬 ${post.replies}</span>
                            </div>
                        </article>
                    `).join('');
                }
            }

            loadRankings() {
                const rankings = [
                    {name:'Elden Ring: Shadow', delta:+3},
                    {name:'Honkai: Star Rail', delta:+1},
                    {name:'Genshin Impact', delta:-1},
                    {name:'League of Legends', delta:+2},
                    {name:'Valorant', delta:0}
                ];

                const mixList = document.getElementById('mixList');
                if (mixList) {
                    mixList.innerHTML = rankings.map((game, i) => {
                        const cls = i < 3 ? `top top${i+1}` : '';
                        const sign = game.delta > 0 ? '▲' : game.delta < 0 ? '▼' : '–';
                        const dcls = game.delta > 0 ? 'up' : game.delta < 0 ? 'down' : 'flat';
                        const deltaText = game.delta === 0 ? '0' : Math.abs(game.delta);
                        
                        return `
                            <div class="rrow ${cls}">
                                <div class="rank">${i+1}</div>
                                <div class="title-2">${game.name}</div>
                                <div class="delta ${dcls}">${sign} ${deltaText}</div>
                            </div>
                        `;
                    }).join('');
                }
            }

            setupThemeToggle() {
                // 設定主題切換邏輯已在 bindEvents 中實作
            }
        }

        // 初始化 GameCore
        document.addEventListener('DOMContentLoaded', () => {
            new GameCore();
        });
    </script>
</body>
</html>
